from datetime import datetime
import mysql.connector
from mysql.connector import Error
import streamlit as st
import bcrypt
from typing import Optional, Dict, Any

def insert_dispute_submission(name, email, address, dob, ssn_last4, bureau, dispute_reasons, letter_date):
    connection = None
    try:
        if isinstance(dob, str):
            dob = datetime.strptime(dob, "%m/%d/%Y").strftime("%Y-%m-%d")
        if isinstance(letter_date, str):
            letter_date = datetime.strptime(letter_date, "%m/%d/%Y").strftime("%Y-%m-%d")

        connection = mysql.connector.connect(
            host=st.secrets["MYSQL_HOST"],
            port=int(st.secrets["MYSQL_PORT"]),
            user=st.secrets["MYSQL_USER"],
            password=st.secrets["MYSQL_PASSWORD"],
            database=st.secrets["MYSQL_DATABASE"]
        )

        if connection.is_connected():
            cursor = connection.cursor()
            insert_query = """
                INSERT INTO dispute_submissions (
                    name, email, address, dob, ssn_last4,
                    bureau, dispute_reasons, letter_date
                )
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            """
            cursor.execute(insert_query, (
                name, email, address, dob, ssn_last4,
                bureau, dispute_reasons, letter_date
            ))
            connection.commit()
            return True

    except Error as e:
        st.error(f"MySQL Error (Dispute Insert): {e}")
        return False

    finally:
        if 'connection' in locals() and connection and connection.is_connected():
            cursor.close()
            connection.close()


def insert_user(email, password):
    try:
        connection = mysql.connector.connect(
            host=st.secrets["MYSQL_HOST"],
            port=int(st.secrets["MYSQL_PORT"]),
            user=st.secrets["MYSQL_USER"],
            password=st.secrets["MYSQL_PASSWORD"],
            database=st.secrets["MYSQL_DATABASE"]
        )

        if connection.is_connected():
            cursor = connection.cursor()

            # âœ… Secure password hashing here
            password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8').strip()

            insert_query = """
                INSERT INTO users (email, password, created_at)
                VALUES (%s, %s, NOW())
            """
            cursor.execute(insert_query, (email, password_hash))
            connection.commit()
            return True

    except Error as e:
        st.error(f"MySQL Error (User Insert): {e}")
        return False

    finally:
        if 'connection' in locals() and connection and connection.is_connected():
            cursor.close()
            connection.close()


def get_connection():
    try:
        connection = mysql.connector.connect(
            host=st.secrets["MYSQL"]["MYSQL_HOST"],
            port=int(st.secrets["MYSQL"]["MYSQL_PORT"]),
            user=st.secrets["MYSQL"]["MYSQL_USER"],
def get_connection():
    try:
        connection = mysql.connector.connect(
            host=st.secrets["MYSQL_HOST"],
            port=int(st.secrets["MYSQL_PORT"]),
            user=st.secrets["MYSQL_USER"],
            password=st.secrets["MYSQL_PASSWORD"],
            database=st.secrets["MYSQL_DATABASE"]
        )
        return connection
    except Exception as e:
        st.error(f"Database connection error: {str(e)}")
        return None            password=st.secrets["MYSQL"]["MYSQL_PASSWORD"],
            database=st.secrets["MYSQL"]["MYSQL_DATABASE"]
        )
        return connection
    except Exception as e:
        st.error(f"Database connection error: {str(e)}")
        return None


def get_user_by_email(email: str) -> Optional[Dict[str, Any]]:
    connection = None
    try:
        connection = get_connection()
        if connection and connection.is_connected():
            cursor = connection.cursor(dictionary=True)
            query = "SELECT * FROM users WHERE email = %s"
            cursor.execute(query, (email,))
            user = cursor.fetchone()
            cursor.close()
            return user
    except Exception as e:
        st.error(f"Error fetching user: {str(e)}")
        return None
    finally:
        if 'connection' in locals() and connection and connection.is_connected():
            connection.close()


def update_user_password(email, new_password):
    try:
        connection = mysql.connector.connect(
            host=st.secrets["MYSQL_HOST"],
            port=int(st.secrets["MYSQL_PORT"]),
            user=st.secrets["MYSQL_USER"],
            password=st.secrets["MYSQL_PASSWORD"],
            database=st.secrets["MYSQL_DATABASE"]
        )

        if connection.is_connected():
            cursor = connection.cursor()
            new_hash = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8').strip()
            cursor.execute(
                "UPDATE users SET password = %s WHERE email = %s",
                (new_hash, email)
            )
            connection.commit()
            return True

    except Error as e:
        st.error(f"MySQL Error (Update Password): {e}")
        return False

    finally:
        if 'connection' in locals() and connection and connection.is_connected():
            cursor.close()
            connection.close()


def create_user(email: str, password: str) -> bool:
    connection = None
    try:
        connection = get_connection()
        if connection and connection.is_connected():
            cursor = connection.cursor()
            query = "INSERT INTO users (email, password) VALUES (%s, %s)"
            cursor.execute(query, (email, password))
            connection.commit()
            cursor.close()
            return True
    except Exception as e:
        st.error(f"Error creating user: {str(e)}")
        return False
    finally:
        if 'connection' in locals() and connection and connection.is_connected():
            connection.close()


def init_db():
    connection = None
    try:
        connection = get_connection()
        if connection and connection.is_connected():
            cursor = connection.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    email VARCHAR(255) UNIQUE NOT NULL,
                    password VARCHAR(255) NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS dispute_letters (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    user_id INT NOT NULL,
                    bureau VARCHAR(50) NOT NULL,
                    reasons TEXT NOT NULL,
                    status VARCHAR(20) DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(id)
                )
            """)
            connection.commit()
            cursor.close()
            return True
    except Exception as e:
        st.error(f"Error initializing database: {str(e)}")
        return False
    finally:
        if 'connection' in locals() and connection and connection.is_connected():
            connection.close()

